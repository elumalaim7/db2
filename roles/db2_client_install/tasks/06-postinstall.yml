---
# - name: move the "{{ user_name }}" instance to "{{ standard_user }}"...
#   command: mv "{{ db2_inst_home }}"/sqllib /home/"{{ standard_user }}/sqllib" 
#   register: db2_rename_instance

# - name: Print rename instance output...
#   debug:
#     msg: "{{ db2_rename_instance }}" 

# - name: recursively update /home/{{ standard_user }}/sqllib directory owner
#   file:
#     path: /home/{{ standard_user }}/sqllib
#     state: directory
#     recurse: yes
#     owner: "{{ standard_user }}"

- name: Copy the /home/{{ user_name }}/sqllib instance to "{{ db2_home }}"...
  copy:
    src: /home/{{ user_name }}/sqllib
    dest: "{{ db2_home }}/"
    owner: "{{ standard_user }}"
    group: "{{ standard_group }}"
    remote_src: yes 
  # command: cp -R /home/{{ user_home }}/sqllib "{{ db2_home }}/"
  register: db2_instance_copy
  

- name: Print instance copy to "{{ db2_home }}" output...
  debug:
    msg: "{{ db2_instance_copy }}" 
  

- name: Create a symbolic link
  ansible.builtin.file:
    src: "{{ db2_home }}/sqllib"
    dest: /home/{{ standard_user }}/sqllib
    owner: "{{ standard_user }}"
    group: "{{ standard_group }}"
    state: link
  

- name: replace line DB2INSTANCE={{ user_name }} in /home/{{ standard_user }}/sqllib/db2profile
  lineinfile: 
    path: /home/{{ standard_user }}/sqllib/db2profile 
    regexp: '^(.*)DB2INSTANCE={{ user_name }}(.*)$' 
    line: 'DB2INSTANCE={{ standard_user }}'
    backrefs: yes
  

- name: replace line "{{ standard_user }}" in /home/{{ standard_user }}/sqllib/db2profile
  lineinfile: 
    path: /home/{{ standard_user }}/sqllib/db2profile 
    regexp: '^(.*)INSTHOME=/home/{{ user_name }}(.*)$' 
    line: 'INSTHOME=/home/{{ standard_user }}'
    backrefs: yes
  

- name: replace line DB2INSTANCE={{ user_name }} in /home/{{ standard_user }}/sqllib/db2cshrc
  lineinfile: 
    path: /home/{{ standard_user }}/sqllib/db2cshrc 
    regexp: '^(.*)setenv DB2INSTANCE {{ user_name }}(.*)$' 
    line: 'setenv DB2INSTANCE {{ standard_user }}'
    backrefs: yes
  
- name: replace line "{{ standard_user }}" in /home/{{ standard_user }}/sqllib/db2cshrc
  lineinfile: 
    path: /home/{{ standard_user }}/sqllib/db2cshrc 
    regexp: '^(.*)setenv INSTHOME /home/{{ user_name }}(.*)$' 
    line: 'setenv INSTHOME /home/{{ standard_user }}'
    backrefs: yes
  

# - name: recursively update "{{ db2_home }}"/sqllib directory owner to "{{ standard_user }}"
#   file:
#     path: "{{ item }}"
#     state: directory
#     recurse: yes
#     owner: "{{ standard_user }}"
#   with_items:
#     - "{{ db2_home }}/sqllib/tmp"
#     - "{{ db2_home }}/sqllib/log"
#     - "{{ db2_home }}/sqllib/db2dump"
#     - "{{ db2_home }}/sqllib/ctrlha"
#     - "{{ db2_home }}/sqllib/ctrl"
#     - "{{ db2_home }}/sqllib/cfgcache"
#     - "{{ db2_home }}/sqllib/cfg"
#     - "{{ db2_home }}/sqllib/adm"
#     - "{{ db2_home }}/sqllib/backup"
#     - "{{ db2_home }}/sqllib/security64"
#     - "{{ db2_home }}/sqllib/security32"
#     - "{{ db2_home }}/sqllib/security"
#     - "{{ db2_home }}/sqllib/uif"  
#   tags: test 

# - name: recursively update "{{ db2_home }}"/sqllib file owner to "{{ standard_user }}"
#   file:
#     path: "{{ item }}"
#     state: file
#     owner: "{{ standard_user }}"
#   with_items:
#     - "{{ db2_home }}/sqllib/userprofile"
#     - "{{ db2_home }}/sqllib/usercshrc"
#     - "{{ db2_home }}/sqllib/global.reg"
#     - "{{ db2_home }}/sqllib/db2systm"
#     - "{{ db2_home }}/sqllib/db2profile"
#     - "{{ db2_home }}/sqllib/db2cshrc"
#   tags: test 


- name: Drop db2 instance "{{ user_name }}"
  command: "{{ db2_instance_path }}/db2idrop {{ user_name }}"
  register: db2_instance_drop
  # ignore_errors: yes
  
- name: Print DB2 drop output
  debug:
    msg: "{{ db2_instance_drop }}"
  

- name: Remove "{{ user_name }}" user
  user:
    name: "{{ user_name }}"
    state: absent
    remove: yes 
  # ignore_errors: yes
  tags: test

- name: Validating DB2 
  command: /home/{{ standard_user }}/sqllib/bin/db2val -o
  register: db2_val
  tags: test

- name: Validate results
  debug:
    msg: "{{ db2_val }}"
  tags: test

- name: DB2 client delete content & directory
  file:
    state: absent
    path: "{{ db2_package_dir }}"
  tags: test